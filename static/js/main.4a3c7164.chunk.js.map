{"version":3,"sources":["images/spiderman.png","images/venom.png","images/doc_ock.png","images/green_goblin.png","images/miles.png","images/spider_ham.png","images/sandman.png","images/rhino.png","images/noir.png","images/gwen.png","images/kingpin.png","images/spiderman2.png","components/Navbar/Navbar.js","components/Character/Character.js","components/Container/Container.js","components/Footer/Footer.js","components/Banner/Banner.js","images.js","components/ClickyGame.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","props","react_default","a","createElement","className","navMsgColor","navMessage","score","highScore","Character","onClick","e","clickEvent","target","src","name","alt","Container","shake","characters","map","i","components_Character_Character","key","Footer","Banner","images","spiderman","venom","doc_ock","green_goblin","miles","spider_ham","sandman","rhino","noir","gwen","kingpin","spiderman2","ClickyGame","state","allCharacters","_this","shuffleArray","wasClicked","checkClicked","bind","Object","assertThisInitialized","newArr","slice","shuffleArr","length","push","splice","Math","floor","random","clickedElem","_this2","this","prevState","shuffled","includes","setState","setTimeout","components_Navbar_Navbar","components_Banner_Banner","components_Container_Container","components_Footer_Footer","Component","ReactDOM","render","components_ClickyGame","document","getElementById"],"mappings":"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","file":"static/js/main.4a3c7164.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spiderman.52fc5ec5.png\";","module.exports = __webpack_public_path__ + \"static/media/venom.0eb868cd.png\";","module.exports = __webpack_public_path__ + \"static/media/doc_ock.9dda4761.png\";","module.exports = __webpack_public_path__ + \"static/media/green_goblin.40ab3542.png\";","module.exports = __webpack_public_path__ + \"static/media/miles.5cf30092.png\";","module.exports = __webpack_public_path__ + \"static/media/spider_ham.d12c43cf.png\";","module.exports = __webpack_public_path__ + \"static/media/sandman.17bee205.png\";","module.exports = __webpack_public_path__ + \"static/media/rhino.fcd52468.png\";","module.exports = __webpack_public_path__ + \"static/media/noir.07bce146.png\";","module.exports = __webpack_public_path__ + \"static/media/gwen.75c17b21.png\";","module.exports = __webpack_public_path__ + \"static/media/kingpin.2672ba1a.png\";","module.exports = __webpack_public_path__ + \"static/media/spiderman2.ec6e51ef.png\";","import React from 'react';\r\nimport './Navbar.css';\r\n\r\nconst Navbar = props => (\r\n  <div className=\"navbar \">\r\n    <div>Clicky Game</div>\r\n    <div className={props.navMsgColor}>{props.navMessage}</div>\r\n    <div>\r\n      Score: {props.score} <span className=\"pipe\">|</span> High Score: {props.highScore}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport './Character.css';\r\n\r\n// the onClick function is defined as a callback so that the clicked elements value\r\n// can be passed to props.clickEvent to check if the image has been clicked or not\r\nconst Character = props => (\r\n  <div className=\"card\" onClick={e => props.clickEvent(e.target.src)}>\r\n    <img className=\"card-img-top card-height\" src={props.name} alt=\"\" />\r\n  </div>\r\n);\r\n\r\nexport default Character;","import React from 'react';\r\nimport './Container.css';\r\nimport Character from '../Character';\r\n\r\n// main container for each Character component\r\n// loops through each index in props.characters, which contains an array of character images\r\n// to create a new Character component for each image\r\n// attaches the passed down clickEvent function to each Character component\r\nconst Container = props => (\r\n  // loops through\r\n  <div\r\n    className={\r\n      props.shake\r\n        ? 'container d-flex flex-wrap justify-content-center shake'\r\n        : 'container d-flex flex-wrap justify-content-center'\r\n    }\r\n  >\r\n    {props.characters.map((a, i) => <Character name={a} key={i} clickEvent={props.clickEvent} />)}\r\n  </div>\r\n);\r\n\r\nexport default Container;","import React from 'react';\r\nimport './Footer.css';\r\n\r\nconst Footer = () => <div className=\"footer text-center\">Andy Marshall</div>;\r\n\r\nexport default Footer;","import React from 'react';\r\nimport './Banner.css';\r\n\r\nconst Banner = () => (\r\n  <div className=\"banner text-center d-flex align-items-center justify-content-center\">\r\n    <p className=\"m-0\">Click on an image to earn points, but don't click on any more than once!</p>\r\n  </div>\r\n);\r\nexport default Banner;","import spiderman from './images/spiderman.png';\r\nimport venom from './images/venom.png';\r\nimport doc_ock from './images/doc_ock.png';\r\nimport green_goblin from './images/green_goblin.png';\r\nimport miles from './images/miles.png';\r\nimport spider_ham from './images/spider_ham.png';\r\nimport sandman from './images/sandman.png';\r\nimport rhino from './images/rhino.png';\r\nimport noir from './images/noir.png';\r\nimport gwen from './images/gwen.png';\r\nimport kingpin from './images/kingpin.png';\r\nimport spiderman2 from './images/spiderman2.png';\r\n\r\nconst images = [\r\n  spiderman,\r\n  venom,\r\n  doc_ock,\r\n  green_goblin,\r\n  miles,\r\n  spider_ham,\r\n  sandman,\r\n  rhino,\r\n  noir,\r\n  gwen,\r\n  kingpin,\r\n  spiderman2\r\n];\r\n\r\nexport default images;","import React, { Component } from 'react';\r\nimport Navbar from './Navbar';\r\nimport Container from './Container';\r\nimport Footer from './Footer';\r\nimport Banner from './Banner';\r\nimport images from '../images';\r\n\r\nclass ClickyGame extends Component {\r\n  state = {\r\n    score: 0,\r\n    highScore: 0,\r\n\r\n    // stores the class value to assign to navMessage based on a good or bad click\r\n    navMsgColor: '',\r\n\r\n    // contains intro, success, and failure message\r\n    navMessage: 'Click an image to begin!',\r\n\r\n    // contains an array of image urls\r\n    allCharacters: this.shuffleArray(),\r\n\r\n    // will track  each clicked element.\r\n    wasClicked: [],\r\n\r\n    // shakes the container on an incorrect guess if set to true\r\n    shake: false\r\n  };\r\n\r\n  // binds the current this context to checkClicked to have access to the current state\r\n  // when passed down to the Character component\r\n  clickEvent = this.checkClicked.bind(this);\r\n\r\n  // used to shuffle the array of images when the DOM loads, and when an image is clicked\r\n  shuffleArray() {\r\n    // creates a copy of the current characters array to modify it by value, and not by reference\r\n    const newArr = images.slice();\r\n\r\n    // will store the shuffled array\r\n    const shuffleArr = [];\r\n\r\n    // each loop through an index gets spliced from newArr, reducing its length\r\n    // gets a random index based off the current length of newArr\r\n    // splices the value from newArr, and pushes it to shuffleArr\r\n    while (newArr.length > 0) {\r\n      shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\r\n    }\r\n\r\n    return shuffleArr;\r\n  }\r\n\r\n  checkClicked(clickedElem) {\r\n    // creates a copy of the wasClicked array to modify it by value, and not by reference. wasClicked stores all previous clicked images\r\n    const prevState = this.state.wasClicked.slice();\r\n\r\n    // shuffles the images\r\n    const shuffled = this.shuffleArray();\r\n\r\n    // tracks score\r\n    let score = this.state.score;\r\n    let highScore = this.state.highScore;\r\n\r\n    // if the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\r\n    if (!this.state.wasClicked.includes(clickedElem)) {\r\n      // if score and highScore are the same, then there is a new highScore value\r\n      if (score === highScore) {\r\n        score++;\r\n        highScore++;\r\n\r\n        // if they are not equal, then only increase the score value\r\n      } else {\r\n        score++;\r\n      }\r\n\r\n      // adds the clicked item to wasClicked to track that it has been clicked\r\n      prevState.push(clickedElem);\r\n    }\r\n\r\n    // resets the current score if the same element was clicked twice\r\n    if (this.state.wasClicked.includes(clickedElem)) {\r\n      let score = 0;\r\n      return this.setState({\r\n        score: score,\r\n        highScore: highScore,\r\n        navMsgColor: 'incorrect',\r\n        navMessage: 'Incorrect guess!',\r\n        allCharacters: shuffled,\r\n        wasClicked: [],\r\n        shake: true\r\n      });\r\n    }\r\n\r\n    // if this runs, then the same element has not been clicked twice and the score is increased\r\n    this.setState({\r\n      score: score,\r\n      highScore: highScore,\r\n      navMsgColor: 'correct',\r\n      navMessage: 'You Guessed Correctly!',\r\n      allCharacters: shuffled,\r\n      wasClicked: prevState,\r\n      shake: false\r\n    });\r\n\r\n    // removes the green correct indicator on a successful click after .5s to re-render the class on each success\r\n    return setTimeout(() => this.setState({ navMsgColor: '' }), 500);\r\n  }\r\n\r\n  // renders score to the navbar.\r\n  // passes the randomized state.allCharacters array to Container to create a Character component for each image.\r\n  // passes the this.checkClicked down to container to pass to each Character component to be used for the click event.\r\n  render() {\r\n    const state = this.state;\r\n    return (\r\n      <div>\r\n        <Navbar\r\n          score={state.score}\r\n          highScore={state.highScore}\r\n          navMessage={state.navMessage}\r\n          navMsgColor={state.navMsgColor}\r\n        />\r\n        <Banner />\r\n        <Container\r\n          shake={state.shake}\r\n          characters={state.allCharacters}\r\n          clickEvent={this.clickEvent}\r\n        />\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ClickyGame;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ClickyGame from './components/ClickyGame';\nimport './index.css';\n\nReactDOM.render(<ClickyGame />, document.getElementById('root'));"],"sourceRoot":""}